name: Production Health Check

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Check application health
        id: health
        run: |
          # Check main application endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://your-domain.com)
          echo "Main site status: $RESPONSE"
          echo "main_status=$RESPONSE" >> $GITHUB_OUTPUT
          
          # Check API health endpoint
          API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://your-domain.com/api/health)
          echo "API health status: $API_RESPONSE"
          echo "api_status=$API_RESPONSE" >> $GITHUB_OUTPUT
          
          # Check critical features
          if [[ "$RESPONSE" != "200" ]] || [[ "$API_RESPONSE" != "200" ]]; then
            echo "‚ùå Health check failed!"
            exit 1
          else
            echo "‚úÖ All systems operational"
          fi

      - name: Performance check
        id: performance
        run: |
          # Measure response time
          LOAD_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' https://your-domain.com)
          echo "Page load time: ${LOAD_TIME}s"
          echo "load_time=$LOAD_TIME" >> $GITHUB_OUTPUT
          
          # Alert if load time exceeds threshold (3 seconds)
          if (( $(echo "$LOAD_TIME > 3" | bc -l) )); then
            echo "‚ö†Ô∏è Performance degradation detected"
            echo "performance_degraded=true" >> $GITHUB_OUTPUT
          fi

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Health Check Failed',
              body: `## Health Check Failure Alert
              
              **Time**: ${new Date().toISOString()}
              **Main Site Status**: ${{ steps.health.outputs.main_status }}
              **API Status**: ${{ steps.health.outputs.api_status }}
              
              ### Actions Required:
              1. Check production logs
              2. Verify Vercel deployment status
              3. Check database connectivity
              4. Review recent deployments
              
              cc: @team`,
              labels: ['critical', 'production', 'health-check']
            });
            console.log(`Created issue #${issue.data.number}`);

      - name: Alert on performance degradation
        if: steps.performance.outputs.performance_degraded == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: '‚ö†Ô∏è Performance Degradation Detected',
              attachments: [{
                color: 'warning',
                fields: [
                  { title: 'Load Time', value: '${{ steps.performance.outputs.load_time }}s', short: true },
                  { title: 'Threshold', value: '3s', short: true },
                  { title: 'URL', value: 'https://your-domain.com', short: false }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true